if [ -f /etc/bashrc ]; then
   . /etc/bashrc   # --> Read /etc/bashrc, if present.
fi

umask 2
export NODE_VERS=v12.16.2
export DISTRO=linux-x64
export SVN_EDITOR=nvim
export EDITOR=nvim
export PATH=${PATH}:${HOME}/bin:~/dotfiles/git-scripts
export PATH=${PATH}:/usr/local/lib/nodejs/node-${NODE_VERS}-${DISTRO}/bin

alias findf='find -iname \* | xargs grep -nH --color=auto '
alias findc='find -iname \*.c -o -iname \*.cc -o -iname \*.cpp | xargs grep -nH --color=auto '
alias findh='find -iname \*.h | xargs grep -nH --color=auto '

alias ..='cd ..'
alias cd..='cd ..'

alias ll='ls -lhAG --color'
alias ls='ls -CFG --color'
alias mkdir='mkdir -p'
alias top='htop'
alias vim='nvim'

#-------------------------------------------------------------
# Some settings
#-------------------------------------------------------------

ulimit -S -c 0          # Don't want any coredumps.
set -o notify
set -o noclobber
set -o ignoreeof
set -o nounset
#set -o xtrace          # Useful for debuging.

# Enable options:
shopt -s cdspell
shopt -s cdable_vars
shopt -s checkhash
shopt -s checkwinsize
shopt -s sourcepath
shopt -s no_empty_cmd_completion
shopt -s cmdhist
shopt -s histappend histreedit histverify
shopt -s extglob        # Necessary for programmable completion.

# Disable options:
shopt -u mailwarn
unset MAILCHECK         # Don't want my shell to warn me of incoming mail.


#-------------------------------------------------------------
# Greeting, motd etc...
#-------------------------------------------------------------

# Define some colors first:
red='\e[0;31m'
RED='\e[1;31m'
blue='\e[0;34m'
#BLUE='\e[1;34m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
NC='\e[0m'              # No Color
# --> Nice. Has the same effect as using "ansi.sys" in DOS.

				
#=========================================================================
# PROGRAMMABLE COMPLETION - ONLY SINCE BASH-2.04
# Most are taken from the bash 2.05 documentation and from Ian McDonald's
# 'Bash completion' package (http://www.caliban.org/bash/#completion).
# You will in fact need bash more recent than 3.0 for some features.
#=========================================================================

if [ "${BASH_VERSION%.*}" \< "3.0" ]; then
    echo "You will need to upgrade to version 3.0 \
for full programmable completion features."
    return
fi


shopt -s extglob         # Necessary,
set +o nounset          # otherwise some completions will fail.

complete -A hostname   rsh rcp telnet rlogin r ftp ping disk ssh
complete -A export     printenv
complete -A variable   export local readonly unset
complete -A enabled    builtin
complete -A alias      alias unalias
complete -A function   function
complete -A user       su mail finger

complete -A helptopic  help     # Currently, same as builtins.
complete -A shopt      shopt
complete -A stopped -P '%' bg
complete -A job -P '%'     fg jobs disown

complete -A directory  mkdir rmdir
complete -A directory   -o default cd

# Compression
complete -f -o default -X '*.+(zip|ZIP)'  zip
complete -f -o default -X '!*.+(zip|ZIP)' unzip
complete -f -o default -X '*.+(z|Z)'      compress
complete -f -o default -X '!*.+(z|Z)'     uncompress
complete -f -o default -X '*.+(gz|GZ)'    gzip
complete -f -o default -X '!*.+(gz|GZ)'   gunzip
complete -f -o default -X '*.+(bz2|BZ2)'  bzip2
complete -f -o default -X '!*.+(bz2|BZ2)' bunzip2
complete -f -o default -X '!*.+(zip|ZIP|z|Z|gz|GZ|bz2|BZ2)' extract

if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

#======================================================================
# Functions
#======================================================================
extract(){
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)      tar xjf $1  ;;
            *.tar.gz)       tar xzf $1  ;;
            *.bz2)          bunzip2 $1  ;;
            *.rar)          rar x $1  ;;
            *.gz)           gunzip $1  ;;
            *.tar)          tar xf $1  ;;
            *.tbz2)         tar xjf $1  ;;
            *.tgz)          tar xzf $1  ;;
            *.zip)          unzip $1  ;;
            *)              echo "'$1' cannot be extracted via extract()";;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

grab() {
    sudo chown -R ${USER} ${1:-.}
}
fif() {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

export PATH="$HOME/.cargo/bin:$PATH"

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
