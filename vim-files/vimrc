" ========== Vim Basic Settings ============="

" Make vim incompatbile to vi.
set nocompatible
set modelines=0
filetype off


"Changing Leader Key Needs to be done first
let mapleader = ","

" OS detection
let g:os_windows = (has('win16') || has('win32') || has('win64')) && &shellcmdflag =~ '/'
let g:os_cygwin = has('win32unix')
let g:has_ag = executable('ag')
if has("unix")
   let s:uname = system("uname -s")
   if s:uname == "Darwin"
      g:os_x = 1
   endif
endif
let s:vimDir='~/.vim'
if g:os_windows
   let s:vimDir='~/vimfiles'
endif

" ============ Vundle settings =============="

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" ========== Color Schemes= ================="
Plugin 'altercation/vim-colors-solarized'
Plugin 'jonathanfilip/vim-lucius'

" =========== Powerline (statusbar) ============="
Plugin 'bling/vim-airline'

" ========== Tagbar Settings ================"
Plugin 'majutsushi/tagbar'

" ========== NerdTree Settings ==============="
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'

" ======= MiniBufExplorer Settings =========="
Plugin 'fholgado/minibufexpl.vim'

" ========== ctrlp Settings ================"
Plugin 'kien/ctrlp.vim'

" ============== promptline ================"
"Plugin 'edkolev/promptline.vim'

" ============== tmux status line  ================"
Plugin 'edkolev/tmuxline.vim'

" ============== Ultisnip ==================="
Plugin 'SirVer/ultisnips'
" standard snippets
Plugin 'honza/vim-snippets'

" =========== Focus on stuff =============="
Plugin 'junegunn/goyo.vim'

" ============ C code browsing ============"
Plugin 'vim-scripts/CCTree'

" =========== Grep Integration ============="
Plugin 'yegappan/grep'

" =========== Git Integration ===="
Plugin 'tpope/vim-fugitive'

" =========== VCS control ============="
Plugin 'vcscommand.vim'

" ========== tmux integration ========r"
Plugin 'christoomey/vim-tmux-navigator'

" =========== window swapping ========"
Plugin 'wesQ3/vim-windowswap'

" =========== Arduino ========"
" Snippets and syntax
Plugin 'sudar/vim-arduino-snippets'
Plugin 'sudar/vim-arduino-syntax'

call vundle#end()
filetype plugin indent on

" Powerline settings "
let g:airline_theme='wombat'
let g:airline_powerline_fonts=1
let g:airline#extensions#tmuxline#enabled=1
let g:airline#extensions#whitespace#enabled=0
set ttimeoutlen=50

" Tagbar key bindings."
nmap <leader>l <ESC>:TagbarToggle<cr>
imap <leader>l <ESC>:TagbarToggle<cr>i
let g:tagbar_autofocus = 1

let g:tagbar_type_make = {
         \ 'kinds' : [
         \ 'm:macros',
         \ 't:targets',
         \ ],
         \ }

" Mapping to NERDTree
nnoremap <C-n> :NERDTreeToggle<cr>
let NERDTreeIgnore=['\~$', '\.pyc$']
let NERDTreeShowBookmarks = 1 
nnoremap <leader>cc :CVSconflict<CR>

" buffer navigation
let g:miniBufExplCycleArround = 1
nnoremap <leader><Tab>     :MBEbb<CR>
nnoremap <leader><S-Tab>     :MBEbf<CR>
" close current buffer but preserve window
nnoremap <leader>x :MBEbd<CR>

" ignore virtual environments
let g:ctrlp_custom_ignore = {
         \ 'dir':  '\v[\/]\.(git|hg|svn)$',
         \ 'file': '\v\.(exe|so|dll|jar)$',
         \ 'link': 'some_bad_symbolic_links',
         \ }
" dont set a limit to the files it will open
let g:ctrlp_max_files = 0
" tell ctrlp to create new files in the same window
let g:ctrlp_open_new_file = 'r'

" lazy delay so i can finish typeing before search starts
let g:ctrlp_lazy_update = 1

" tmux configuration
let g:tmuxline_preset = {
         \'a'    : '#(whoami)',
         \'b'    : '(#P)#W',
         \'c'    : '#h',
         \'win'  : '#I #W',
         \'cwin' : '#I #W',
         \'x'    : '%a',
         \'y'    : '(#P)#W %R',
         \'z'    : '#S'}

let g:goyo_width = 120
let g:goyo_margin_top = 20
let g:goyo_margin_bottom = 20
nnoremap <leader>f :Goyo<CR>

nnoremap <silent> <leader>mm :Rgrep<CR>
if g:has_ag
   let g:Grep_Path = 'ag'
   let g:Fgrep_Path = 'ag'
   let g:Egrep_Path = 'ag'
endif

let g:pymode_rope_goto_definition_bind = '<leader>g'

nnoremap <leader>cc :CVSconflict<CR>

"TAB settings.
set tabstop=3
set shiftwidth=3
set softtabstop=3
set expandtab

" More Windows only settings
if g:os_windows
   "   to allow swap files to be written in the temp directory
   set directory=.,$TEMP

endif

" More Common Settings.
set encoding=utf-8
set scrolloff=3
set autoindent
set noshowmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell

set nobackup
set noswapfile

set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2

" window navigation
noremap <C-Up>       <C-W>k
noremap <C-Down>     <C-W>j
noremap <C-Left>     <C-W>h
noremap <C-Right>    <C-W>l

" allows to sudo w when you forget to before hand
cmap w!! w !sudo tee % >/dev/null

"set relativenumbee
set number
set norelativenumber

"set undofile
"set shell=/bin/bash
set lazyredraw
set matchtime=3

""""
" Set title to window
set title 

" Dictionary path, from which the words are being looked up.
set dictionary=/usr/share/dict/words

" Make pasting done without any indentation break."
set pastetoggle=<F3>

" Make Vim able to edit corntab fiels again.
set backupskip=/tmp/*,/private/tmp/*"

" Enable Mouse
set mouse=a

"Settings for Searching and Moving
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
"nnoremap <tab> %
"vnoremap <tab> %


" do not wrap unless i tell you to wrap
set wrap
"set textwidth=79
"set formatoptions=qrn1
"set colorcolumn=79

" To  show special characters in Vim
"set list
set listchars=tab:▸\ ,eol:¬

" Naviagations using keys up/down/left/right
" Disabling default keys to learn the hjkl
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
"inoremap <up> <nop>
"inoremap <down> <nop>
"inoremap <left> <nop>
"inoremap <right> <nop>
nnoremap j gj
nnoremap k gk

" Get Rid of stupid Goddamned help keys
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Map : to ; also in command mode.
"nnoremap ; :

" Adding More Shorcuts keys using leader kye.
" Leader Kye provide separate namespace for specific commands.
",W Command to remove white space from a file.
""nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" ,ft Fold tag, helpful for HTML editing.
nnoremap <leader>ft vatzf

" ,q Re-hardwrap Paragraph
nnoremap <leader>q gqip

" ,v Select just pasted text.
nnoremap <leader>v V`]

" ,ev Shortcut to edit and source .vimrc file on the fly on a vertical window.
nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>et :e ~/.dotfiles/tmux/tmux.conf<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" search and replace the text under the cursor
nnoremap <leader>r :%s/\<<C-r><C-w>\>//g<left><left>
nnoremap <leader>rc :%s/\<<C-r><C-w>\>//gc<left><left><left>

" search for text under visual selection
vnoremap <silent> * :<C-U>
   \ let old_reg=getreg('"')<Bar> let old_regtype=getregtype('"')<CR>
   \ gvy/<C-R><C-R>=substitute(
      \ escape(@", '/\.*$^~['), '\_s+', '\\_s\\+', 'g')<CR><CR>
   \ gV:call setreg('"', old_reg, old_regtype)<CR>


" jj For Qicker Escaping between normal and editing mode.
"inoremap jj <ESC>
" set working directory to that of the current buffer
nnoremap <leader>h :cd %:p:h<CR>:pwd<CR>

" double click to highlight a word under cursor
"noremap <2-LeftMouse> *


" Wildmenu completion "
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn " Version Controls"
set wildignore+=*.aux,*.out,*.toc "Latex Indermediate files"
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg "Binary Imgs"
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest "Compiled Object files"
set wildignore+=*.spl "Compiled speolling world list"
set wildignore+=*.sw? "Vim swap files"
set wildignore+=*.DS_Store "OSX SHIT"
set wildignore+=*.luac "Lua byte code"
set wildignore+=migrations "Django migrations"
set wildignore+=*.pyc "Python Object codes"
set wildignore+=*.orig "Merge resolution files"

"Make Sure that Vim returns to the same line when we reopen a file"
augroup line_return
   au!
   au BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   execute 'normal! g`"zvzz' |
            \ endif
augroup END

" any help window that is opened is closed with just q
augroup close_help_q
   au!
   au BufWinEnter *
            \ if &buftype=='help' |
            \   noremap <buffer> q :bd<CR> | 
            \ endif
augroup END

nnoremap g; g;zz

" colorscheme settings
"MBE Colors
"augroup mbe_colors
"    au!
"   au ColorScheme * highlight link MBENormal               Folded 
"    au ColorScheme * highlight link MBEChanged              ErrorMsg
"    au ColorScheme * highlight link MBEVisibleNormal        Title
"    au ColorScheme * highlight link MBEVisibleChanged       Error
"    au ColorScheme * highlight link MBEVisibleActiveNormal  SpellRare
"    au ColorScheme * highlight link MBEVisibleActiveChanged Todo
"augroup END
"hi link MBENormal               Folded
"hi link MBEChanged              ErrorMsg
"ai link MBEVisibleNormal        Title
"hi link MBEVisibleChanged       Error
"hi link MBEVisibleActiveNormal  SpellRare
"hi link MBEVisibleActiveChanged Todo 

set t_Co=256
syntax enable
set background=dark
colorscheme lucius
LuciusBlackLowContrast


" diff settings for easy toggle
nnoremap <silent> <leader>df :call DiffToggle()<CR>
nnoremap  <leader>dg :diffget<CR>
nnoremap  <leader>dp :diffput<CR>
function! DiffToggle()
   if &diff
      diffoff
   else
      diffthis
   endif
endfunction

" switch between terminal and vim mouse modes
noremap <F10> :call ToggleMouse()<CR>
function! ToggleMouse()
   if !exists("s:old_mouse")
      let s:old_mouse="a"
   endif

   if &mouse == ""
      let &mouse = s:old_mouse
      echo "Mouse is for Vim (" . &mouse . ")"
   else
      let s:old_mouse = &mouse
      let &mouse=""
      echo "Mouse is for Terminal"
   endif
endfunction
" =========== END Basic Vim Settings ===========


" =========== Gvim Settings =============
if has("gui_running")
   set lines=999 columns=999
   set guioptions-=l
   set guioptions-=L
   set guioptions-=r
   set guioptions-=R
   set guioptions-=T
   if g:os_windows
      set guifont=Powerline_Consolas:h9:cANSI
      set guioptions-=e
      set guioptions-=m
      set guioptions-=g
   elseif g:os_x
      set guifont=Inconsolata-g\ for\ Powerline:h9
   else
      set guifont=Powerline\ Consolas\ 10
   endif
endif
" Source the vimrc file after saving it
augroup vimrc_load
   au!
   au bufwritepost .vimrc source ~/.vimrc
augroup END

" ========== END Gvim Settings ==========
